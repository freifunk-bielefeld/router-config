### config for bgp1 ###

#log "/var/log/bird6.log" all;
#log syslog all;

router id 89.163.130.160;
define myas = 65529;
table ebgp;
table ibgp;
table internal_ospf;
table internal;
table v6_upstream;

### functions ###

function net_local() {
	return net ~ [ fdef:17a0:ffb1::/48+,
			2001:bf7:1320::/44+,
			2a03:2260:11f::/48+ ];
}

function net_ffrl() {
	return net ~ [ 2a03:2260:11f::/48+ ];
}

function ip6_default() {
	return net ~ [ ::/0 ];
}

function ip6_freifunk(){
	return net ~ [2001:bf7::/32{44,64},
			2a03:2260::/29{32,64},
			2a03:2267::/32{32,64},
			2001:67c:2d50::/48{48,64} ];
}

function ula(){
	return net ~ [ fd00::/8{48,64} ];
}

### kernel ###

### export all routes to table main ###
protocol kernel {
	scan time 10;
	table internal;
	kernel table 100;
	import none;
	export filter {
		if ip6_freifunk() then krt_prefsrc = 2001:bf7:1320:42::1;   # edit: own ip
		if ula() then krt_prefsrc = fdef:17a0:ffb1:42::1;
		if ip6_freifunk() then accept;
		if ula() then accept;
		reject;
	};
};

protocol kernel {
        scan time 10;
        table ebgp;
        kernel table 42;
        import none;
        export filter {
		if ip6_default() then krt_prefsrc = 2001:bf7:1320:42::1;
                if ip6_default() then accept;
                reject;
        };
};


protocol device {
	scan time 10;
}


### static routes for bgp ###
protocol static {
	route fdef:17a0:ffb1::/48 reject;
	route 2001:bf7:1320::/44 reject;
	route 2a03:2260:11f::/48 reject;
	table ebgp;
}

### static routes for ospf ###
protocol static {
	table internal_ospf;
        route fdef:17a0:ffb1:f00a::/64 via "tun7";
	route fdef:17a0:ffb1:f002::/64 via "tun6";
	route fdef:17a0:ffb1:f003::/64 via "tun8";
	route fdef:17a0:ffb1:f007::/64 via "tun10";
	route fdef:17a0:ffb1:42::/64 reject;
	route 2001:bf7:1320:42::/64 reject;
	route 2001:bf7:1320:23::/64 via "tun9";
#       route 2001:bf7:1320::/56 reject;
#        table internal_ospf;
};

### static routes interfaces ###
#protocol static {
#	route fdef:17a0:ffb1:ffff::/64 via "backbone";
#	route 2001:bf7:1320:ffff::/64 via "backbone";
#	route fec0:0:a:cf::/96 via "icvpn";
#	route fdef:17a0:ffb1:1337::/96 via "nat64";
#	table internal;
#}

protocol static {
	table v6_upstream;
	route 2a03:2260:11f::/48 reject;
}

### sync ebgp with ibgp, import export all, exlude local nets ###
protocol pipe {
	table ebgp;
	peer table ibgp;
	import where !net_local();
	export where !net_local() || !ip6_default();
}

### export default-route via ebgp to internal ###
protocol pipe {
	table ebgp;
	peer table internal_ospf;
	#peer table internal;
	import none;
	export where ip6_default();
}

### sync ibgp with internal, export all, import none ###
protocol pipe {
	table ibgp;
	peer table internal;
	import none;
	export all;
}

### sync ospf with internal, export only local nets, import none ###
protocol pipe {
	table internal_ospf;
	peer table internal;
	import none;
	export filter {
		#preference = 98;
		if net_local() || ip6_default() then accept;
		reject;
	};
};

### sync v6_upstream with ebgp, export only ula, ffrl- and fvfn-subnets ###
protocol pipe {
	table v6_upstream;
	peer table ebgp;
	import where ula() || ip6_freifunk();
	export where ula() || ip6_freifunk();
}


### templates ###


### import ula and freifunk, exclude local nets, export ula and freifunk, exclude default-route ###
template bgp PEERS {
	table ebgp;
	local as myas;
	import where (ula() || ip6_freifunk()) && !net_local();
	export where (ula() || ip6_freifunk()) && !ip6_default();
	route limit 10000;
	direct;
	source address fec0::a:cf:0:36;
}


### import ula, freifunk and default-route, exclude local nets, export ula and freifunk, exclude default-route ###
template bgp berlin_upstream {
	table ebgp;
	local as myas;
	import where (ula() ||ip6_freifunk() || ip6_default()) && !net_local();
	export where (ula() || ip6_freifunk()) && !ip6_default();
	route limit 10000;
	direct;
}


### import all, export BGP-routes ###
template bgp bgp_ibgp {
	table ibgp;
	local as myas;
	import filter {
		preference = 99;
		if (ula() || ip6_freifunk()) && (!net_local() &&!ip6_default()) then accept;
		reject;
	};
	export where (ula() || ip6_freifunk()) && !ip6_default();
	gateway direct;
	direct;
	next hop self;
}

template bgp ffrl_upstream {
	table ebgp;
	local as myas;
	import where ip6_default();
	export where net_ffrl();
	direct;
}

include "ibgp_v6-bgp1.conf";
include "icvpn_v6-bgp1.conf";
include "ospfv3-bgp1.conf";
include "upstream_v6.conf";
